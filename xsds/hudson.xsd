<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:element name="Hudson" type="hudson.model.Hudson"/>
  <xsd:complexType name="hudson.model.Hudson">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.Node">
        <xsd:sequence>
          <xsd:element name="description" type="xsd:string" minOccurs="0"/>
          <xsd:element name="job" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>

              <xsd:documentation> Gets just the immediate children of {@link Hudson}.

 @see #getAllItems(Class)
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="overallLoad" type="hudson.model.OverallLoadStatistics" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Load statistics of the entire system.
</xsd:documentation>
            </xsd:annotation>

          </xsd:element>
          <xsd:element name="primaryView" type="hudson.model.View" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the primary {@link View} that renders the top-page of Hudson.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="slaveAgentPort" type="xsd:int"/>
          <xsd:element name="useCrumbs" type="xsd:boolean">

            <xsd:annotation>
              <xsd:documentation> If true, all the POST requests to Hudson would have to have crumb in it to protect
 Hudson from CSRF vulnerabilities.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="useSecurity" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> A convenience method to check if there's some security
 restrictions in place.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="view" type="hudson.model.View" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> Gets the read-only list of all {@link View}s.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.View">
    <xsd:sequence>
      <xsd:element name="description" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Message displayed in the top page. Can be null. Includes HTML.

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="job" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation> Gets all the items in this collection in a read-only view.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>

      <xsd:element name="name" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Gets the name of all this collection.

 @see #rename(String)
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="url" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Gets the absolute URL of this view.

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.OverallLoadStatistics">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.LoadStatistics">
        <xsd:sequence>

          <xsd:element name="totalQueueLength" type="hudson.model.MultiStageTimeSeries" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Number of total {@link Queue.BuildableItem}s that represents blocked builds.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>

  </xsd:complexType>
  <xsd:complexType name="hudson.model.MultiStageTimeSeries">
    <xsd:sequence>
      <xsd:element name="hour" type="hudson.model.TimeSeries" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Updated every 1 hour. Keep data up to 4 weeks.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>

      <xsd:element name="min" type="hudson.model.TimeSeries" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Updated every 1 min. Keep data up to 1 day.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="sec10" type="hudson.model.TimeSeries" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Updated every 10 seconds. Keep data up to 1 hour.

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.TimeSeries">
    <xsd:sequence>
      <xsd:element name="history" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>

          <xsd:documentation> Gets the history data of the exponential moving average. The returned array should be treated
 as read-only and immutable.

 @return
      Always non-null, contains at least one entry.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="latest" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation> Gets the most up-to-date data point value. {@code getHistory[0]}.
</xsd:documentation>
        </xsd:annotation>

      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.LoadStatistics">
    <xsd:sequence>
      <xsd:element name="busyExecutors" type="hudson.model.MultiStageTimeSeries" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Number of busy executors and how it changes over time.

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="queueLength" type="hudson.model.MultiStageTimeSeries" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Number of {@link Queue.BuildableItem}s that can run on any node in this node set but blocked.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>

      <xsd:element name="totalExecutors" type="hudson.model.MultiStageTimeSeries" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Number of total executors and how it changes over time.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Node">

    <xsd:sequence>
      <xsd:element name="assignedLabel" type="hudson.model.labels.LabelAtom" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation> Returns the possibly empty set of labels that are assigned to this node,
 including the automatic {@link #getSelfLabel() self label}, manually
 assigned labels and dynamically assigned labels via the
 {@link LabelFinder} extension point.

 This method has a side effect of updating the hudson-wide set of labels
 and should be called after events that will change that - e.g. a slave
 connecting.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="mode" type="hudson.model.Node-Mode" minOccurs="0">
        <xsd:annotation>

          <xsd:documentation> Returns {@link Mode#EXCLUSIVE} if this node is only available
 for those jobs that exclusively specifies this node
 as the assigned node.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="nodeDescription" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Human-readable description of this node.
</xsd:documentation>
        </xsd:annotation>

      </xsd:element>
      <xsd:element name="nodeName" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Name of this node.

 @return
      "" if this is master
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="numExecutors" type="xsd:int">
        <xsd:annotation>

          <xsd:documentation> Returns the number of {@link Executor}s.

 This may be different from &lt;code&gt;getExecutors().size()&lt;/code&gt;
 because it takes time to adjust the number of executors.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="hudson.model.labels.LabelAtom">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.Label">
        <xsd:sequence>
          <xsd:element name="propertiesList" type="hudson.model.labels.LabelAtomProperty" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="hudson.model.labels.LabelAtomProperty">
    <xsd:sequence/>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Label">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.Actionable">
        <xsd:sequence>
          <xsd:element name="busyExecutors" type="xsd:int">
            <xsd:annotation>

              <xsd:documentation> Number of busy {@link Executor}s that are carrying out some work right now.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="cloud" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> Gets all {@link Cloud}s that can launch for this label.
</xsd:documentation>
            </xsd:annotation>

          </xsd:element>
          <xsd:element name="description" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns a human readable text that explains this label.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="idleExecutors" type="xsd:int">
            <xsd:annotation>

              <xsd:documentation> Number of idle {@link Executor}s that can start working immediately.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="loadStatistics" type="hudson.model.LoadStatistics" minOccurs="0"/>
          <xsd:element name="name" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Alias for {@link #getDisplayName()}.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="node" type="hudson.model.Node" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> Gets all {@link Node}s that belong to this label.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <xsd:element name="offline" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> Returns true if all the nodes of this label is offline.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="tiedJob" type="hudson.model.AbstractProject" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> Returns projects that are tied on this node.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="totalExecutors" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation> Number of total {@link Executor}s that belong to this label that are functioning.
 &lt;p&gt;
 This excludes executors that belong to offline nodes.
</xsd:documentation>

            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.AbstractProject">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.Job">

        <xsd:sequence>
          <xsd:element name="concurrentBuild" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> Does this project perform concurrent builds?
 @since 1.319
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="downstreamProject" type="hudson.model.AbstractProject" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>

              <xsd:documentation> Gets the other {@link AbstractProject}s that should be built
 when a build of this project is completed.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="scm" type="hudson.scm.SCM" minOccurs="0"/>
          <xsd:element name="upstreamProject" type="hudson.model.AbstractProject" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>

  </xsd:complexType>
  <xsd:complexType name="hudson.scm.SCM">
    <xsd:sequence>
      <xsd:element name="browser" type="hudson.scm.RepositoryBrowser" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Returns the applicable {@link RepositoryBrowser} for files
 controlled by this {@link SCM}.

 &lt;p&gt;
 This method attempts to find applicable browser
 from other job configurations.

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="type" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Type of this SCM.

 Exposed so that the client of the remote API can tell what SCM this is.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>

    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.scm.RepositoryBrowser">
    <xsd:sequence/>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Job">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.AbstractItem">
        <xsd:sequence>

          <xsd:element name="buildable" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> Returns true if we should display "build now" icon
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="build" type="hudson.model.Run" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> Gets the read-only view of all the builds.
 
 @return never null. The first entry is the latest build.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="color" type="hudson.model.BallColor" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Used as the color of the status ball for the project.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <xsd:element name="firstBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the oldest build in the record.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="healthReport" type="hudson.model.HealthReport" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element name="inQueue" type="xsd:boolean"/>
          <xsd:element name="keepDependencies" type="xsd:boolean">

            <xsd:annotation>
              <xsd:documentation> If true, it will keep all the build logs of dependency components.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lastBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last build.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lastCompletedBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last completed build, if any. Otherwise null.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <xsd:element name="lastFailedBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last failed build, if any. Otherwise null.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lastStableBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last stable build, if any. Otherwise null.
 @see #getLastSuccessfulBuild

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lastSuccessfulBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last successful build, if any. Otherwise null. A successful build
 would include either {@link Result#SUCCESS} or {@link Result#UNSTABLE}.
 
 @see #getLastStableBuild()
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <xsd:element name="lastUnstableBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last unstable build, if any. Otherwise null.
 @see #getLastSuccessfulBuild
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="lastUnsuccessfulBuild" type="hudson.model.Run" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the last build that was anything but stable, if any. Otherwise null.
 @see #getLastSuccessfulBuild

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="nextBuildNumber" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation> Peeks the next build number.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <xsd:element name="property" type="hudson.model.JobProperty" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> List of all {@link JobProperty} exposed primarily for the remoting API.
 @since 1.282
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="queueItem" type="hudson.model.Queue-Item" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> If this job is in the build queue, return its item.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Queue-Item">
    <xsd:complexContent>

      <xsd:extension base="hudson.model.Actionable">
        <xsd:sequence>
          <xsd:element name="blocked" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> Build is blocked because another build is in progress,
 required {@link Resource}s are not available, or otherwise blocked
 by {@link Task#isBuildBlocked()}.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="buildable" type="xsd:boolean">

            <xsd:annotation>
              <xsd:documentation> Build is waiting the executor to become available.
 This flag is only used in {@link Queue#getItems()} for
 'pseudo' items that are actually not really in the queue.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="params" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Gets a human-readable message about the parameters of this item
 @return String

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="stuck" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> True if the item is starving for an executor for too long.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>

          <xsd:element name="task" type="xsd:anyType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Project to be built.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="why" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Gets a human-readable status message describing why it's in the queue.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.JobProperty">
    <xsd:sequence/>

  </xsd:complexType>
  <xsd:complexType name="hudson.model.HealthReport">
    <xsd:sequence>
      <xsd:element name="description" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Getter for property 'description'.

 @return Value for property 'description'.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>

      <xsd:element name="iconUrl" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Getter for property 'iconUrl'.

 @return Value for property 'iconUrl'.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="score" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation> Getter for property 'score'.

 @return The percentage health score (from 0 to 100 inclusive).

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Run">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.Actionable">
        <xsd:sequence>

          <xsd:element name="artifact" type="hudson.model.Run-Artifact" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
              <xsd:documentation> Gets the artifacts (relative to {@link #getArtifactsDir()}.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="building" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation> Returns true if the build is not completed yet.
 This includes "not started yet" state.

</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="description" type="xsd:string" minOccurs="0"/>
          <xsd:element name="duration" type="xsd:long">
            <xsd:annotation>
              <xsd:documentation> Gets the millisecond it took to build.
</xsd:documentation>
            </xsd:annotation>

          </xsd:element>
          <xsd:element name="fullDisplayName" type="xsd:string" minOccurs="0"/>
          <xsd:element name="id" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Unique ID of this build.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="keepLog" type="xsd:boolean">

            <xsd:annotation>
              <xsd:documentation> Returns true if this log file should be kept and not deleted.

 This is used as a signal to the {@link LogRotator}.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="number" type="xsd:int"/>
          <xsd:element name="result" type="xsd:anyType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Returns the build result.

 &lt;p&gt;

 When a build is {@link #isBuilding() in progress}, this method
 returns an intermediate result.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="timestamp" type="xsd:long" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> When the build is scheduled.
</xsd:documentation>
            </xsd:annotation>

          </xsd:element>
          <xsd:element name="url" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Obtains the absolute URL to this build.

 @deprecated
      This method shall &lt;b&gt;NEVER&lt;/b&gt; be used during HTML page rendering, as it won't work with
      network set up like Apache reverse proxy.
      This method is only intended for the remote API clients who cannot resolve relative references
      (even this won't work for the same reason, which should be fixed.)
</xsd:documentation>
            </xsd:annotation>

          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Run-Artifact">
    <xsd:sequence>
      <xsd:element name="displayPath" type="xsd:string" minOccurs="0"/>
      <xsd:element name="fileName" type="xsd:string" minOccurs="0">

        <xsd:annotation>
          <xsd:documentation> Returns just the file name portion, without the path.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="relativePath" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> Relative path name from {@link Run#getArtifactsDir()}

</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.AbstractItem">
    <xsd:complexContent>
      <xsd:extension base="hudson.model.Actionable">
        <xsd:sequence>

          <xsd:element name="description" type="xsd:string" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation> Gets the project description HTML.
</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="displayName" type="xsd:string" minOccurs="0"/>
          <xsd:element name="name" type="xsd:string" minOccurs="0"/>
          <xsd:element name="url" type="xsd:string" minOccurs="0"/>

        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="hudson.model.Actionable">
    <xsd:sequence>
      <xsd:element name="action" type="xsd:anyType" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation> Gets actions contributed to this build.

 &lt;p&gt;

 A new {@link Action} can be added by {@code getActions().add(...)}.

 @return
      may be empty but never null.
</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="hudson.model.BallColor">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="red"/>

      <xsd:enumeration value="red_anime"/>
      <xsd:enumeration value="yellow"/>
      <xsd:enumeration value="yellow_anime"/>
      <xsd:enumeration value="blue"/>
      <xsd:enumeration value="blue_anime"/>
      <xsd:enumeration value="grey"/>
      <xsd:enumeration value="grey_anime"/>
      <xsd:enumeration value="disabled"/>
      <xsd:enumeration value="disabled_anime"/>

      <xsd:enumeration value="aborted"/>
      <xsd:enumeration value="aborted_anime"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="hudson.model.Node-Mode">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="NORMAL"/>
      <xsd:enumeration value="EXCLUSIVE"/>
    </xsd:restriction>

  </xsd:simpleType>
</xsd:schema>

